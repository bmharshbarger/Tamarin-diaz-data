[["index.html", "Reproducible Data Science - Final semester project Chapter 1 Project details", " Reproducible Data Science - Final semester project Brynn Harshbarger 2023-04-27 Chapter 1 Project details This is the final semester project I am working on for Reproducible Data Science 2023. In this project, I created a SQL database using data on Geoffroy’s tamarins that was shared with me by Dr. Samuel Díaz-Muñoz. Next, I calculated and plotted home ranges of each tamarin group using the sp package. I will not end up working with this data for my dissertation (I am very happy to say I’ve managed to get my lemur seed dispersal project off the ground!), but it was still fun to play around with. I would like to eventually learn how to use the amt package to create home ranges. "],["database-building.html", "Chapter 2 Database building", " Chapter 2 Database building In this chapter, I built my tamarin database Here I read in csv files and combined into one data frame group_lc &lt;- read.csv(&quot;data-raw/group_lc_habitat.csv&quot;) group_ph &lt;- read.csv(&quot;data-raw/group_ph_habitat.csv&quot;) group_ba &lt;- read.csv(&quot;data-raw/group_ba_habitat.csv&quot;) groups &lt;- na.omit(rbind(group_lc, group_ph, group_ba)) # combine into 1 data frame # and omit na values Next, I formatted the data frame and created a date time column groups &lt;- groups %&gt;% # merge date time columns mutate(date_time = as.POSIXct(paste(date, time), format = &quot;%m/%d/%Y %H:%M&quot;)) groups &lt;- groups[c(-2, -3)] # remove date and time columns groups$unique_id &lt;- 1:nrow(groups) saveRDS(groups, &quot;groups.RDS&quot;) Here I connected to SQL and created the database my_db &lt;- dbConnect(RSQLite::SQLite(), &quot;my_db.db&quot;) # establish database connection dbExecute(my_db, &quot;DROP TABLE tamarin;&quot;) dbExecute(my_db, &quot;CREATE TABLE tamarin( unique_id VARCHAR(5) NOT NULL, group_id VARCHAR(2) NOT NULL, waypoint VARCHAR(4) NOT NULL, lat CHAR(7) NOT NULL, lon CHAR(7) NOT NULL, habitat VARCHAR(10), boundary VARCHAR(10), boundary_2 VARCHAR(10), height VARCHAR(10), height_code VARCHAR(10), canopy VARCHAR(10), canopy_code VARCHAR(5), date_time VARCHAR(20), PRIMARY KEY (unique_id) );&quot; ) Lastly, I wrote and queried the table dbWriteTable(my_db, &quot;tamarin&quot;, groups, append = TRUE) dbGetQuery(my_db, &quot;SELECT * FROM tamarin LIMIT 10;&quot;) ## unique_id group_id waypoint lat lon habitat boundary boundary_2 ## 1 1 lc 98 9.11594 -79.696519 Forest ## 2 2 lc 99 9.116011 -79.696592 Forest ## 3 3 lc 100 9.11597 -79.69662 Edge Forest Backyard ## 4 4 lc 101 9.116026 -79.696473 Forest ## 5 5 lc 102 9.115788 -79.696495 Forest ## 6 6 lc 103 9.115722 -79.696563 Forest ## 7 7 lc 104 9.115342 -79.69653 Forest ## 8 8 lc 105 9.114917 -79.696993 Forest ## 9 9 lc 105 9.114917 -79.696993 Forest ## 10 10 lc 106 9.114983 -79.696981 Forest ## height height_code canopy canopy_code date_time ## 1 10 meters 4 Mid 3 1205916120.0 ## 2 6 meters 3 Mid 3 1205917320.0 ## 3 6 meters 3 Upper 4 1205917920.0 ## 4 10 meters 4 Upper 4 1205918520.0 ## 5 10 meters 4 Upper 4 1205919120.0 ## 6 &gt; 6 meters 4 Mid 3 1205919720.0 ## 7 &gt; 15 meters 5 Upper 4 1205920320.0 ## 8 &gt; 10 meters 5 Upper 4 1205920920.0 ## 9 &gt; 10 meters 5 Upper 4 1205921520.0 ## 10 10 meters 4 Upper 4 1205922120.0 "],["visualization.html", "Chapter 3 Visualization", " Chapter 3 Visualization In this chapter I created home range maps by tamarin group library(sf) library(sp) library(dplyr) library(adehabitatHR) library(tidyverse) First, I converted my “groups” data frame to a spatial points data frame and projected to UTM groups &lt;- readRDS(&quot;groups.RDS&quot;) groups_a &lt;- groups %&gt;% dplyr::select(group_id, lon, lat) coordinates(groups_a) &lt;- c(&quot;lon&quot;, &quot;lat&quot;) proj4string(groups_a) &lt;- CRS(&quot;+init=epsg:4326&quot;) # define crs groups_a &lt;- sp::spTransform(groups_a, CRS = CRS(&quot;+init=epsg:32738&quot;)) # project to UTM Next, I calculated and plotted home ranges by group using kernel density estimation library(scales) # allows me to make polygons partly transparent using alpha argument ud &lt;- kernelUD(groups_a, h = &quot;href&quot;) hr &lt;- getverticeshr(ud, percent = 95) # hr is in hectares as_tibble(hr) # shows home range in hectares of each group ## # A tibble: 3 × 2 ## id area ## &lt;chr&gt; &lt;dbl&gt; ## 1 ba 39.2 ## 2 lc 89.2 ## 3 ph 38.8 plot(hr, col = alpha(1:3, 0.5)) legend(&quot;topright&quot;, legend = hr$id, lty = 1, col = alpha(1:3), title = &quot;Group ID&quot;) Here I plotted both spatial points and polygons together by group library(graphics) plot(groups_a, col = as.factor(groups_a@data$group_id), pch = 16) plot(hr, col = alpha(1:3, 0.5), add = TRUE) legend(&quot;topright&quot;, legend = hr$id, lty = 1, col = alpha(1:3), title = &quot;Group ID&quot;) This is similar to the plot above, however I used the sf and ggplot2 packages instead. library(sf) groups_sf &lt;- st_as_sf(groups_a) groups_hr &lt;- st_as_sf(hr) ggplot() + geom_sf(data = groups_sf, aes(fill = group_id)) + geom_sf(data = groups_hr, aes(fill = id)) + scale_fill_manual(values = alpha(1:3, 0.3)) + theme_bw() "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
